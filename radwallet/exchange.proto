syntax = "proto3";

option go_package = "github.com/Radhark-Tech/radhark-go/radwallet";

option java_multiple_files = true;
option java_outer_classname = "ProfileProto";
option java_package = "radhark.radwallet";

package radhark.radwallet;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";


message ExchangeCommon {
  string id = 1 [json_name = "id"];
  string name = 2 [json_name = "name"];
}

message ExchangeList {
  repeated ExchangeCommon exchanges = 1;
}

message ExchangeUser {
  string id = 1 [json_name = "id"];
  string api_key = 2 [json_name = "api_key"];
  string secret_key = 3 [json_name = "secret_key"];
}
message ExchangeId {
  string id = 1 [json_name = "id"];
  string coin = 2 [json_name = "coin"];
}
message CoinDetail {
  string id = 1 [json_name = "id"];
  string coin = 2 [json_name = "coin"];
  string vsCoin = 3 [json_name = "vs_coin"];
  string interval = 4 [json_name = "interval"];
  string limit = 5 [json_name = "limit"];
}
message UserPatrimony {
  double patrimony = 1;
  map<string, double> converted = 2 [json_name = "patrimony_converted"];
  repeated Coin coins = 3;
}

message Transaction {
  string coin = 1;
  double amount = 2;
  string created_at = 3 [json_name = "created_at"];
  string updated_at = 4 [json_name = "updated_at"];
}

message UserInvested {
  double invested = 1;
  map<string, double> converted = 2 [json_name = "invested_converted"];
  repeated Transaction transactions = 3;
}
message Converted {
  string name = 1;
  double amount = 2;
}
message Coin {
  string asset = 1;
  double amount = 2;
  string type = 3;
  repeated Converted converted_coins = 4 [json_name = "converted_coins"];
  string percentage = 5 [json_name = "percentage"];
}
message Candle {
  string openTime = 1 [json_name = "open_time"];
  string open = 2;
  string high = 3;
  string low = 4;
  string close = 5;
  string volume = 6;
  string closeTime = 7 [json_name = "close_time"];
  int64 tradeNum = 8 [json_name = "trade_num"];
  string TakerBuyBaseAssetVolume = 9 [json_name = "taker_buy_base_asset_volume"];
  string TakerBuyQuoteAssetVolume = 10 [json_name = "taker_buy_quote_asset_volume"];
}
message CoinDetailResponse {
  string symbol = 1;
  repeated Candle candles = 2;
}

service Exchange {
    rpc ListExchanges (google.protobuf.Empty) returns (ExchangeList) {
      option (google.api.http) = { 
        get: "/api/v1/exchange"
      };
    }
    rpc GetUserPatrimony (ExchangeId) returns (UserPatrimony) {
      option (google.api.http) = { 
        get: "/api/v1/exchange/{id}/patrimony"
      };
    }
    rpc GetUserInvested (ExchangeId) returns (UserInvested) {
      option (google.api.http) = { 
        get: "/api/v1/exchange/{id}/invested"
      };
    }
    rpc GetCoinDetail (CoinDetail) returns (CoinDetailResponse) {
      option (google.api.http) = { 
        get: "/api/v1/exchange/{id}/coin/{coin}"
      };
    }
}